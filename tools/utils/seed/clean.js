"use strict";
var util = require("gulp-util");
var path_1 = require("path");
var rimraf = require("rimraf");
var config_1 = require("../../config");
function clean(paths) {
    return function (done) {
        var pathsToClean;
        if (paths instanceof Array) {
            pathsToClean = paths;
        }
        else {
            pathsToClean = [paths];
        }
        var promises = pathsToClean.map(function (p) {
            return new Promise(function (resolve) {
                var relativePath = path_1.relative(config_1.default.PROJECT_ROOT, p);
                if (relativePath.startsWith('..')) {
                    util.log(util.colors.bgRed.white("Cannot remove files outside the project root but tried \"" + path_1.normalize(p) + "\""));
                    process.exit(1);
                }
                else {
                    rimraf(p, function (e) {
                        if (e) {
                            util.log('Clean task failed with', e);
                        }
                        else {
                            util.log('Deleted', util.colors.yellow(p || '-'));
                        }
                        resolve();
                    });
                }
            });
        });
        Promise.all(promises).then(function () { return (done || (function () { return 1; }))(); })
            .catch(function (e) { return util.log(util.colors.red("Error while removing files \"" + [].concat(paths).join(', ') + "\", " + e)); });
    };
}
exports.clean = clean;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbGVhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0NBQWtDO0FBQ2xDLDZCQUEyQztBQUMzQywrQkFBaUM7QUFFakMsdUNBQWtDO0FBTWxDLGVBQXNCLEtBQXNCO0lBQzFDLE1BQU0sQ0FBQyxVQUFBLElBQUk7UUFDVCxJQUFJLFlBQXNCLENBQUM7UUFDM0IsRUFBRSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0IsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixZQUFZLEdBQUcsQ0FBUyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUEsT0FBTztnQkFDeEIsSUFBTSxZQUFZLEdBQVcsZUFBUSxDQUFDLGdCQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM5RCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsOERBQTJELGdCQUFTLENBQUMsQ0FBQyxDQUFDLE9BQUcsQ0FBQyxDQUFDLENBQUM7b0JBQzlHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFBLENBQUM7d0JBQ1QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDTixJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxDQUFDO3dCQUN4QyxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNwRCxDQUFDO3dCQUNELE9BQU8sRUFBRSxDQUFDO29CQUNaLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBTSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQXJCLENBQXFCLENBQUM7YUFDcEQsS0FBSyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQ0FBK0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQU0sQ0FBRyxDQUFDLENBQUMsRUFBOUYsQ0FBOEYsQ0FBQyxDQUFDO0lBQ2hILENBQUMsQ0FBQztBQUNKLENBQUM7QUE5QkQsc0JBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbCBmcm9tICdndWxwLXV0aWwnO1xuaW1wb3J0IHsgcmVsYXRpdmUsIG5vcm1hbGl6ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgcmltcmFmIGZyb20gJ3JpbXJhZic7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJztcblxuLyoqXG4gKiBDbGVhbnMgdGhlIGdpdmVuIHBhdGgocykgdXNpbmcgYHJpbXJhZmAuXG4gKiBAcGFyYW0ge3N0cmluZyBvciBzdHJpbmdbXX0gcGF0aHMgLSBUaGUgcGF0aCBvciBsaXN0IG9mIHBhdGhzIHRvIGNsZWFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYW4ocGF0aHM6IHN0cmluZ3xzdHJpbmdbXSk6IChkb25lOiAoKSA9PiB2b2lkKSA9PiB2b2lkIHtcbiAgcmV0dXJuIGRvbmUgPT4ge1xuICAgIGxldCBwYXRoc1RvQ2xlYW46IHN0cmluZ1tdO1xuICAgIGlmIChwYXRocyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBwYXRoc1RvQ2xlYW4gPSBwYXRocztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aHNUb0NsZWFuID0gWzxzdHJpbmc+cGF0aHNdO1xuICAgIH1cblxuICAgIGxldCBwcm9taXNlcyA9IHBhdGhzVG9DbGVhbi5tYXAocCA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aDogc3RyaW5nID0gcmVsYXRpdmUoQ29uZmlnLlBST0pFQ1RfUk9PVCwgcCk7XG4gICAgICAgIGlmIChyZWxhdGl2ZVBhdGguc3RhcnRzV2l0aCgnLi4nKSkge1xuICAgICAgICAgIHV0aWwubG9nKHV0aWwuY29sb3JzLmJnUmVkLndoaXRlKGBDYW5ub3QgcmVtb3ZlIGZpbGVzIG91dHNpZGUgdGhlIHByb2plY3Qgcm9vdCBidXQgdHJpZWQgXCIke25vcm1hbGl6ZShwKX1cImApKTtcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmltcmFmKHAsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgdXRpbC5sb2coJ0NsZWFuIHRhc2sgZmFpbGVkIHdpdGgnLCBlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHV0aWwubG9nKCdEZWxldGVkJywgdXRpbC5jb2xvcnMueWVsbG93KHAgfHwgJy0nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IChkb25lIHx8ICgoKSA9PiAxKSkoKSlcbiAgICAgIC5jYXRjaChlID0+IHV0aWwubG9nKHV0aWwuY29sb3JzLnJlZChgRXJyb3Igd2hpbGUgcmVtb3ZpbmcgZmlsZXMgXCIke1tdLmNvbmNhdChwYXRocykuam9pbignLCAnKX1cIiwgJHtlfWApKSk7XG4gIH07XG59XG5cbiJdfQ==