"use strict";
var express = require("express");
var fallback = require("express-history-api-fallback");
var openResource = require("open");
var path_1 = require("path");
var codeChangeTool = require("./code_change_tools");
var config_1 = require("../../config");
function serveSPA() {
    codeChangeTool.listen();
}
exports.serveSPA = serveSPA;
function notifyLiveReload(e) {
    var fileName = e.path;
    codeChangeTool.changed(fileName);
}
exports.notifyLiveReload = notifyLiveReload;
function serveDocs() {
    var server = express();
    server.use(config_1.default.APP_BASE, express.static(path_1.resolve(process.cwd(), config_1.default.DOCS_DEST)));
    server.listen(config_1.default.DOCS_PORT, function () {
        return openResource('http://localhost:' + config_1.default.DOCS_PORT + config_1.default.APP_BASE);
    });
}
exports.serveDocs = serveDocs;
function serveCoverage() {
    var server = express();
    server.use(config_1.default.APP_BASE, express.static(path_1.resolve(process.cwd(), config_1.default.COVERAGE_TS_DIR)));
    server.listen(config_1.default.COVERAGE_PORT, function () {
        return openResource('http://localhost:' + config_1.default.COVERAGE_PORT + config_1.default.APP_BASE);
    });
}
exports.serveCoverage = serveCoverage;
function serveProd() {
    var root = path_1.resolve(process.cwd(), config_1.default.PROD_DEST);
    var server = express();
    for (var _i = 0, _a = config_1.default.getProxyMiddleware(); _i < _a.length; _i++) {
        var proxy = _a[_i];
        server.use(proxy);
    }
    server.use(config_1.default.APP_BASE, express.static(root));
    server.use(fallback('index.html', { root: root }));
    server.listen(config_1.default.PORT, function () {
        return openResource('http://localhost:' + config_1.default.PORT + config_1.default.APP_BASE);
    });
}
exports.serveProd = serveProd;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBbUM7QUFDbkMsdURBQXlEO0FBQ3pELG1DQUFxQztBQUNyQyw2QkFBK0I7QUFFL0Isb0RBQXNEO0FBQ3RELHVDQUFrQztBQUtsQztJQUNFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUMxQixDQUFDO0FBRkQsNEJBRUM7QUFPRCwwQkFBaUMsQ0FBSztJQUNwQyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3RCLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUhELDRDQUdDO0FBS0Q7SUFDRSxJQUFJLE1BQU0sR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUV2QixNQUFNLENBQUMsR0FBRyxDQUNSLGdCQUFNLENBQUMsUUFBUSxFQUNmLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQ3pELENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFNLENBQUMsU0FBUyxFQUFFO1FBQzlCLE9BQUEsWUFBWSxDQUFDLG1CQUFtQixHQUFHLGdCQUFNLENBQUMsU0FBUyxHQUFHLGdCQUFNLENBQUMsUUFBUSxDQUFDO0lBQXRFLENBQXNFLENBQ3ZFLENBQUM7QUFDSixDQUFDO0FBWEQsOEJBV0M7QUFLRDtJQUNFLElBQUksTUFBTSxHQUFHLE9BQU8sRUFBRSxDQUFDO0lBRXZCLE1BQU0sQ0FBQyxHQUFHLENBQ1IsZ0JBQU0sQ0FBQyxRQUFRLEVBQ2YsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGdCQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FDL0QsQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQU0sQ0FBQyxhQUFhLEVBQUU7UUFDbEMsT0FBQSxZQUFZLENBQUMsbUJBQW1CLEdBQUcsZ0JBQU0sQ0FBQyxhQUFhLEdBQUcsZ0JBQU0sQ0FBQyxRQUFRLENBQUM7SUFBMUUsQ0FBMEUsQ0FDM0UsQ0FBQztBQUNKLENBQUM7QUFYRCxzQ0FXQztBQUtEO0lBQ0UsSUFBSSxJQUFJLEdBQUcsY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BELElBQUksTUFBTSxHQUFHLE9BQU8sRUFBRSxDQUFDO0lBRXZCLEdBQUcsQ0FBQyxDQUFjLFVBQTJCLEVBQTNCLEtBQUEsZ0JBQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUEzQixjQUEyQixFQUEzQixJQUEyQjtRQUF4QyxJQUFJLEtBQUssU0FBQTtRQUNaLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbkI7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVsRCxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU3QyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFNLENBQUMsSUFBSSxFQUFFO1FBQ3pCLE9BQUEsWUFBWSxDQUFDLG1CQUFtQixHQUFHLGdCQUFNLENBQUMsSUFBSSxHQUFHLGdCQUFNLENBQUMsUUFBUSxDQUFDO0lBQWpFLENBQWlFLENBQ2xFLENBQUM7QUFDSixDQUFDO0FBZkQsOEJBZUM7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGZhbGxiYWNrIGZyb20gJ2V4cHJlc3MtaGlzdG9yeS1hcGktZmFsbGJhY2snO1xuaW1wb3J0ICogYXMgb3BlblJlc291cmNlIGZyb20gJ29wZW4nO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgKiBhcyBjb2RlQ2hhbmdlVG9vbCBmcm9tICcuL2NvZGVfY2hhbmdlX3Rvb2xzJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJztcblxuLyoqXG4gKiBTZXJ2ZXMgdGhlIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uLiBNb3JlIHNwZWNpZmljYWxseSwgY2FsbHMgdGhlIGBsaXN0ZW5gIG1ldGhvZCwgd2hpY2ggaXRzZWxmIGxhdW5jaGVzIEJyb3dzZXJTeW5jLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VydmVTUEEoKSB7XG4gIGNvZGVDaGFuZ2VUb29sLmxpc3RlbigpO1xufVxuXG4vKipcbiAqIFRoaXMgdXRpbGl0eSBtZXRob2QgaXMgdXNlZCB0byBub3RpZnkgdGhhdCBhIGZpbGUgY2hhbmdlIGhhcyBoYXBwZW5lZCBhbmQgc3Vic2VxdWVudGx5IGNhbGxzIHRoZSBgY2hhbmdlZGAgbWV0aG9kLFxuICogd2hpY2ggaXRzZWxmIGluaXRpYXRlcyBhIEJyb3dzZXJTeW5jIHJlbG9hZC5cbiAqIEBwYXJhbSB7YW55fSBlIC0gVGhlIGZpbGUgdGhhdCBoYXMgY2hhbmdlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUxpdmVSZWxvYWQoZTphbnkpIHtcbiAgbGV0IGZpbGVOYW1lID0gZS5wYXRoO1xuICBjb2RlQ2hhbmdlVG9vbC5jaGFuZ2VkKGZpbGVOYW1lKTtcbn1cblxuLyoqXG4gKiBTdGFydHMgYSBuZXcgYGV4cHJlc3NgIHNlcnZlciwgc2VydmluZyB0aGUgc3RhdGljIGRvY3VtZW50YXRpb24gZmlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJ2ZURvY3MoKSB7XG4gIGxldCBzZXJ2ZXIgPSBleHByZXNzKCk7XG5cbiAgc2VydmVyLnVzZShcbiAgICBDb25maWcuQVBQX0JBU0UsXG4gICAgZXhwcmVzcy5zdGF0aWMocmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBDb25maWcuRE9DU19ERVNUKSlcbiAgKTtcblxuICBzZXJ2ZXIubGlzdGVuKENvbmZpZy5ET0NTX1BPUlQsICgpID0+XG4gICAgb3BlblJlc291cmNlKCdodHRwOi8vbG9jYWxob3N0OicgKyBDb25maWcuRE9DU19QT1JUICsgQ29uZmlnLkFQUF9CQVNFKVxuICApO1xufVxuXG4vKipcbiAqIFN0YXJ0cyBhIG5ldyBgZXhwcmVzc2Agc2VydmVyLCBzZXJ2aW5nIHRoZSBzdGF0aWMgdW5pdCB0ZXN0IGNvZGUgY292ZXJhZ2UgcmVwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VydmVDb3ZlcmFnZSgpIHtcbiAgbGV0IHNlcnZlciA9IGV4cHJlc3MoKTtcblxuICBzZXJ2ZXIudXNlKFxuICAgIENvbmZpZy5BUFBfQkFTRSxcbiAgICBleHByZXNzLnN0YXRpYyhyZXNvbHZlKHByb2Nlc3MuY3dkKCksIENvbmZpZy5DT1ZFUkFHRV9UU19ESVIpKVxuICApO1xuXG4gIHNlcnZlci5saXN0ZW4oQ29uZmlnLkNPVkVSQUdFX1BPUlQsICgpID0+XG4gICAgb3BlblJlc291cmNlKCdodHRwOi8vbG9jYWxob3N0OicgKyBDb25maWcuQ09WRVJBR0VfUE9SVCArIENvbmZpZy5BUFBfQkFTRSlcbiAgKTtcbn1cblxuLyoqXG4gKiBTdGFydHMgYSBuZXcgYGV4cHJlc3NgIHNlcnZlciwgc2VydmluZyB0aGUgYnVpbHQgZmlsZXMgZnJvbSBgZGlzdC9wcm9kYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcnZlUHJvZCgpIHtcbiAgbGV0IHJvb3QgPSByZXNvbHZlKHByb2Nlc3MuY3dkKCksIENvbmZpZy5QUk9EX0RFU1QpO1xuICBsZXQgc2VydmVyID0gZXhwcmVzcygpO1xuXG4gIGZvciAobGV0IHByb3h5IG9mIENvbmZpZy5nZXRQcm94eU1pZGRsZXdhcmUoKSkge1xuICAgIHNlcnZlci51c2UocHJveHkpO1xuICB9XG5cbiAgc2VydmVyLnVzZShDb25maWcuQVBQX0JBU0UsIGV4cHJlc3Muc3RhdGljKHJvb3QpKTtcblxuICBzZXJ2ZXIudXNlKGZhbGxiYWNrKCdpbmRleC5odG1sJywgeyByb290IH0pKTtcblxuICBzZXJ2ZXIubGlzdGVuKENvbmZpZy5QT1JULCAoKSA9PlxuICAgIG9wZW5SZXNvdXJjZSgnaHR0cDovL2xvY2FsaG9zdDonICsgQ29uZmlnLlBPUlQgKyBDb25maWcuQVBQX0JBU0UpXG4gICk7XG59O1xuIl19